(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{185:function(t,a,i){"use strict";i.r(a);var n=i(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("div",{staticClass:"content"},[i("h1",{attrs:{id:"android-ndk-c-c"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#android-ndk-c-c","aria-hidden":"true"}},[t._v("#")]),t._v(" Android NDK (C/C++)")]),t._v(" "),i("p"),i("div",{staticClass:"table-of-contents"},[i("ul",[i("li",[i("a",{attrs:{href:"#intro"}},[t._v("Intro")])]),i("li",[i("a",{attrs:{href:"#зачем-писать-на-c-есnи-есть-kotlin"}},[t._v("Зачем писать на C++, если есть Kotlin?")])]),i("li",[i("a",{attrs:{href:"#installation"}},[t._v("Installation")])]),i("li",[i("a",{attrs:{href:"#добавnение-поддержки-к-новому-проекту"}},[t._v("Добавление поддержки к новому проекту")])]),i("li",[i("a",{attrs:{href:"#добавnение-поддержки-к-существуещему-проекту"}},[t._v("Добавление поддержки к существуещему проекту")])])])]),i("p"),t._v(" "),i("hr"),t._v(" "),i("h3",{attrs:{id:"intro"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#intro","aria-hidden":"true"}},[t._v("#")]),t._v(" Intro")]),t._v(" "),i("p",[i("strong",[t._v("Android NDK")]),t._v(" - это "),i("code",[t._v("native dev kit")]),t._v(" с помощью которого можно писать код на C/C++ который будет потом использоваться в приложении, можно вызывать код из Kotlin в C++, и наоборот.")]),t._v(" "),i("h3",{attrs:{id:"зачем-писать-на-c-есnи-есть-kotlin"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#зачем-писать-на-c-есnи-есть-kotlin","aria-hidden":"true"}},[t._v("#")]),t._v(" Зачем писать на C++, если есть Kotlin?")]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("Защита информации при декомпиляции приложения")]),t._v(". Если вы пишете на С++, то информацию не могут достать так просто, если бы это был код на Java/Kotlin.")]),t._v(" "),i("li",[t._v("Повысить производительность (сортировка больших данных, сложные алгоритмы, ресурсоемкие задачи)")]),t._v(" "),i("li",[t._v("Использовать возможности существующих библиотек, написанных на C / C ++ или вашего собственного нативного кода, который вы хотите использовать повторно")]),t._v(" "),i("li",[t._v("Создавать кросс-платформенные решения (Android и iOS)")]),t._v(" "),i("li",[t._v("Использовать прямое низкоуровневое программирование (т. е. аппаратное обеспечение)")])]),t._v(" "),i("h3",{attrs:{id:"installation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#installation","aria-hidden":"true"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),i("p",[t._v("Нужно зайти в "),i("code",[t._v("Android SDK Tools")]),t._v(" и выбрать для установки там "),i("strong",[t._v("NDK")]),t._v(" и "),i("strong",[t._v("CMake")]),t._v("(сборщик С-го кода), "),i("strong",[t._v("LLDB")]),t._v(".")]),t._v(" "),i("h3",{attrs:{id:"добавnение-поддержки-к-новому-проекту"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#добавnение-поддержки-к-новому-проекту","aria-hidden":"true"}},[t._v("#")]),t._v(" Добавление поддержки к новому проекту")]),t._v(" "),i("p",[t._v("Процесс создания нового проекта с поддержкой нативного кода аналогичен созданию стандартного проекта Android, за исключением нескольких дополнительных шагов:")]),t._v(" "),i("ol",[i("li",[i("p",[t._v("В разделе Настройка нового проекта мастера установите флажок "),i("strong",[t._v("Include C++ Support")]),t._v(' checkbox. Нажмите кнопку "Далее.')])]),t._v(" "),i("li",[i("p",[t._v("Заполните все остальные поля и следующие несколько разделов мастера как обычно.")])]),t._v(" "),i("li",[i("p",[t._v("При появлении запроса выберите "),i("strong",[t._v("Empty Activity")])])]),t._v(" "),i("li",[i("p",[t._v("В разделе «Customize C++ Support» вы можете настроить свой проект с помощью следующих параметров:")])])]),t._v(" "),i("ul",[i("li",[i("p",[i("strong",[t._v("Standart C++")]),t._v(": используйте раскрывающийся список, чтобы выбрать, какую стандартизацию C ++ вы хотите использовать. При выборе Toolchain Default используется настройка CMake по умолчанию. Два других варианта - это C ++ 11 и C ++ 14.")])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("Exceptions Support")]),t._v(". Если эта опция включена, Android Studio добавляет флаг -fexceptions в cppFlags в файле build.gradle уровня модуля, который Gradle передает CMake. Значением по умолчанию является -fno-exception. Это может использоваться для обеспечения совместимости с версиями NDK, более ранними, чем NDKr5, которые не имели поддержки обработки исключений. Чтобы узнать об этом более подробно, перейдите по ссылке: https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_exceptions.html.")])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("Runtime Type Information Support")]),t._v(": с помощью этой опции вы сможете использовать функции отражения кода в коде C ++ во время выполнения. Установите этот флажок, если вы хотите поддержку RTTI. Если эта функция включена, Android Studio добавляет флаг -frtti в cppFlags в файле build.gradle уровня модуля, который Gradle передает в CMake.")])])]),t._v(" "),i("ol",{attrs:{start:"5"}},[i("li",[t._v("Нажмите Готово.")])]),t._v(" "),i("h3",{attrs:{id:"добавnение-поддержки-к-существуещему-проекту"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#добавnение-поддержки-к-существуещему-проекту","aria-hidden":"true"}},[t._v("#")]),t._v(" Добавление поддержки к существуещему проекту")]),t._v(" "),i("p",[t._v("I DONT KNOW HOW at this time. Можно создать новый проект и туда перетащить файлы.")])])}],!1,null,null,null);r.options.__file="android-ndk.md";a.default=r.exports}}]);