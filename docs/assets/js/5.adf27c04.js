(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{175:function(n,t,i){"use strict";i.r(t);var e=i(0),o=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this.$createElement,t=this._self._c||n;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"анимация-пример-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#анимация-пример-1","aria-hidden":"true"}},[this._v("#")]),this._v(" Анимация - пример 1")]),this._v(" "),t("div",{staticClass:"language-javapackage extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('\ncom.app.atletiko.UI.fragments;\n\nimport android.animation.Animator;\nimport android.animation.ArgbEvaluator;\nimport android.animation.ObjectAnimator;\nimport android.content.res.Resources;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.animation.AccelerateInterpolator;\nimport android.widget.ImageView;\nimport com.app.atletiko.R;\nimport com.app.atletiko.UI.MainActivity;\n\n\npublic class StartFragment extends Fragment {\n\n  /**\n   |--------------------------------------------------------------------------\n   | onCreateView\n   |--------------------------------------------------------------------------\n   */\n  @Override\n  public View onCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    View view = inflater.inflate(R.layout.start_fragment, container, false);\n\n    ImageView logoView = (ImageView) view.findViewById(R.id.logoView);\n    View scene = view \n\n    int heightDuration = 1000;\n    int backDuration   = 1500;\n\n    float logoViewYStart = this.logoView.getTop();\n    float logoViewYEnd   = this.scene.getPivotY() - 200;\n\n    // Анимация 1. Перемещение Лого\n    // Тут мы создаем анимацию которая движет обьект от начальной точки до границы\n    // высоты родительского элемента\n    ObjectAnimator heightAnimator = ObjectAnimator.ofFloat(logoView, "y", logoViewYStart, logoViewYEnd).setDuration(heightDuration);\n\n    // Interpolotar - это выполнение анимации по времени,\n    // может быть быстро в начале и медленно в конце,\n    // типа cubic-bezier, linear в css\n    heightAnimator.setInterpolator(new AccelerateInterpolator());\n\n    Resources resources = getResources();\n    int red = resources.getColor(R.color.colorPrimary);\n    int yellow = resources.getColor(R.color.colorYellow);\n\n    // 2 Анимация. Смена цвета бекграунда\n    ObjectAnimator backgroundAnimator = ObjectAnimator.ofInt(this.scene, "backgroundColor", red, yellow).setDuration(backDuration);\n    backgroundAnimator.setEvaluator(new ArgbEvaluator());\n\n    // Запуск анимации\n    heightAnimator.start();\n    backgroundAnimator.start();\n\n    // Жизненные методы анимации\n    backgroundAnimator.addListener(new Animator.AnimatorListener() {\n      @Override\n      public void onAnimationStart(Animator animation) {\n      }\n\n      @Override\n      public void onAnimationEnd(Animator animation) {\n        MainActivity.FRAGMENT_HELPER.goBackToFragment(new HomeFragment(), HomeFragment.LOG_TAG);\n      }\n\n      @Override\n      public void onAnimationCancel(Animator animation) {\n\n      }\n\n      @Override\n      public void onAnimationRepeat(Animator animation) {\n\n      }\n    });\n\n    return view\n  }\n}\n')])])])])}],!1,null,null,null);o.options.__file="animations-ex1.md";t.default=o.exports}}]);